<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:util="http://www.springframework.org/schema/util"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/mvc      
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
           http://www.springframework.org/schema/util   
           http://www.springframework.org/schema/util/spring-util-3.0.xsd">
    
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
		<!-- 配置初始化大小、最小、最大 --> 
		<property name="initialSize" value="${initialSize}" />  
		<property name="minIdle" value="${minIdle}" />  
		<property name="maxActive" value="${maxActive}" />  
		<!-- 配置获取连接等待超时的时间 --> 
		<property name="maxWait" value="${maxWait}" />  
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />  
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />  
		<property name="validationQuery" value="${validationQuery}" />  
		<property name="testWhileIdle" value="${testWhileIdle}" />  
		<property name="testOnBorrow" value="${testOnBorrow}" />  
		<property name="testOnReturn" value="${testOnReturn}" />  
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />  
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />  
		<!-- 配置监控统计拦截的filters --> 
		<property name="filters" value="${filters}" />  
	</bean>
	
    <bean id="sessionFactory"
         class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
         <!-- 配置SessionFactory所需的数据源，注入上面定义的dataSource -->
         <property name="dataSource" ref="dataSource" />
         <!-- mappingResources属性用来列出全部映射文件 -->
         <property name="packagesToScan">
			<list>
				<value>com.wx.kernel.model</value>
			</list>
		</property>
        <!-- 定义hibernate的SessionFactory的属性 -->
        <property name="hibernateProperties">
        	<value>
        		hibernate.jdbc.use_scrollable_resultset=false
        		hibernate.dialect=org.hibernate.dialect.SQLServerDialect
        		hibernate.hbm2ddl.auto=none
        		hibernate.show_sql=true
        		hibernate.format_sql=false
        		hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory
        		hibernate.cache.use_second_level_cache=false
        		hibernate.cache.use_query_cache=false
        		current_session_context_class=thread
        	</value>
        </property>
    </bean>
 
     <!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
     <!-- 该类是PlatformTransactionManager接口对采用Hibernate的特定实现类 -->
     <bean id="txManager"
         class="org.springframework.orm.hibernate4.HibernateTransactionManager">
         <property name="sessionFactory" ref="sessionFactory" />
     </bean>
 
     <!-- 采用注解方式配置事务 -->
     <tx:annotation-driven transaction-manager="txManager" />
        
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
         
    <!-- 配置事务的传播特性
    <bean id="baseTransactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
        <property name="transactionManager" ref="txManager" />
        <property name="transactionAttributes">
            <props>
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="create*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">readOnly</prop>
            </props>
        </property>
    </bean> -->

    <tx:advice id="txAdvice" transaction-manager="txManager">
    	<tx:attributes>
    		<tx:method name="save*" propagation="REQUIRED" />
    		<tx:method name="add*" propagation="REQUIRED" />
    		<tx:method name="create*" propagation="REQUIRED" />
    		<tx:method name="insert*" propagation="REQUIRED" />
    		<tx:method name="update*" propagation="REQUIRED" />
    		<tx:method name="*" read-only="true" />
    	</tx:attributes>
    </tx:advice>
    
    <aop:config proxy-target-class="true">
    	<aop:advisor advice-ref="txAdvice"
    		pointcut="execution(* com.wx.kernel.dao..*.*(..))" />
    </aop:config>



</beans>